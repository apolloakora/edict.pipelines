---
#
# ######################### #
# playbook-base-install.yml #
# ######################### #
#
# This playbook prepares every node to be part of a kubernetes cluster whether
# they are destined to be masters or workers.
#
# This playbook is idempotent can be ran multiple times without a revert or
# reset playbook.
#
# The main pre-requisite is that ssh accesss has been setup and the hosts listed
# within the hosts.ini file.
#
- hosts: all
  vars_files:
    - ./vars/variables.yml
  become: true
  name: Configure the Kubernetes Cluster Nodes
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - gnupg2

  - name: Create containerd config file
    file:
      path: "/etc/modules-load.d/containerd.conf"
      state: "touch"

  - name: Add conf for containerd
    blockinfile:
      path: "/etc/modules-load.d/containerd.conf"
      block: |
            overlay
            br_netfilter

  - name: modprobe overlay
    become: true
    command: modprobe overlay

  - name: modprobe br_netfilter
    become: true
    command: modprobe br_netfilter

  - name: Set system configurations for Kubernetes networking
    file:
      path: "/etc/sysctl.d/99-kubernetes-cri.conf"
      state: "touch"

  - name: Add conf for containerd
    blockinfile:
      path: "/etc/sysctl.d/99-kubernetes-cri.conf"
      block: |
             net.bridge.bridge-nf-call-iptables = 1
             net.ipv4.ip_forward = 1
             net.bridge.bridge-nf-call-ip6tables = 1

  - name: Apply new settings
    become: true
    command: sysctl --system

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for docker stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ k8s_ubuntu_release }} stable
      state: present

  - name: Install docker and its dependecies and Containerd
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

    notify:
      - docker status

#  - name: install containerd
#    shell: |
#            sudo mkdir -p /etc/containerd
#            sudo containerd config default | sudo tee /etc/containerd/config.toml
#            sudo systemctl restart containerd

  - name: Add ubuntu user to docker group
    user:
      name: "{{ node_username }}"
      group: docker

  - name: Write docker daemon.json to all nodes
    copy:
      dest: /etc/docker/daemon.json
      content: "{ \"exec-opts\": [\"native.cgroupdriver=systemd\"] }"

  - name: Restart Docker to switch cgroup driver to systemd
    become: true
    command: systemctl restart docker

  - name: When machine restarts get Docker to startup
    become: true
    command: systemctl enable docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Get and unarchive the cri dockerd file
    ansible.builtin.unarchive:
      src: https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz
      dest: /home/{{ node_username }}
      remote_src: yes

  - name: Copy cri dockerd executable to usr/local/bin
    become: true
    copy:
      remote_src: yes
      src: /home/{{ node_username }}/cri-dockerd/cri-dockerd
      dest: /usr/local/bin
      backup: no
      mode: 0755
      owner: "{{ node_username }}"
      group: docker

  - name: Download docker service files
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
      dest: /etc/systemd/system/

  - name: Download docker socket files
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
      dest: /etc/systemd/system/

  - name: replace cri dockerd executable location
    become: true
    replace:
      path: /etc/systemd/system/cri-docker.service
      regexp: '/usr/bin/cri-dockerd'
      replace: "/usr/local/bin/cri-dockerd"

  - name: force systemd to reread configuration
    systemd:
      daemon_reload: yes

  - name: Enable service cri-docker.service and ensure it is not masked
    systemd:
      name: cri-docker.service
      enabled: yes
      masked: no

  - name: Enable service cri-docker.socket and ensure it is not masked
    systemd:
      name: cri-docker.socket
      state: started
      enabled: yes
      masked: no
      